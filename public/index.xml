<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>千夜同学</title>
    <link>http://70data.net/</link>
    <description>Recent content on 千夜同学</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 11 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://70data.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>博客内容迁移</title>
      <link>http://70data.net/archives/2020-01-11.html</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2020-01-11.html</guid>
      <description>博客的内容，迁移至</description>
    </item>
    
    <item>
      <title>Grafana 中的 Data(IEC) 和 Data(metric)</title>
      <link>http://70data.net/archives/2019-02-04.html</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2019-02-04.html</guid>
      <description>参见 https://en.wikipedia.org/wiki/Mebibyte IEC 是以二进制</description>
    </item>
    
    <item>
      <title>brew link python3 出错</title>
      <link>http://70data.net/archives/2018-04-19.html</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2018-04-19.html</guid>
      <description>&lt;pre&gt;&lt;code&gt;brew install python3
Warning: python3 3.6.3 is already installed, it&#39;s just not linked.
You can use `brew link python3` to link this version.
brew link python3
Linking /usr/local/Cellar/python3/3.6.3... Error: Permission denied @ dir_s_mkdir /usr/local/Frameworks
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现 /usr/local/ 下没有路径 /usr/local/Frameworks，需要新建该路径，并修改权限。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Grafana 忘记密码 重置 admin 密码</title>
      <link>http://70data.net/archives/2018-04-01.html</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2018-04-01.html</guid>
      <description>&lt;p&gt;先进入 grafana 的数据库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlite3 /var/lib/grafana/grafana.db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行 update 操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlite&amp;gt; update user set password = &#39;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&#39;, salt = &#39;F3FAxVm33R&#39; where login = &#39;admin&#39;;
sqlite&amp;gt; .exit
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Mac Cisco AnyConnect Client 卸载</title>
      <link>http://70data.net/archives/2018-02-15.html</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2018-02-15.html</guid>
      <description>&lt;p&gt;获取所有包信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkgutil --pkgs | grep com.cisco
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>InfluxDB 报错 connection refused service=subscriber</title>
      <link>http://70data.net/archives/2018-02-01.html</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2018-02-01.html</guid>
      <description>&lt;p&gt;InfluxDB 的日志中有大量如下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Post http://localhost:9092/write?consistency=&amp;amp;db=_internal&amp;amp;precision=ns&amp;amp;rp=monitor: dial tcp 127.0.0.1:9092: getsockopt: connection refused service=subscriber
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>HTTP 传输内容的压缩</title>
      <link>http://70data.net/archives/2017-09-28.html</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2017-09-28.html</guid>
      <description>&lt;p&gt;HTTP 压缩，在 HTTP 协议中，其实是内容编码的一种。&lt;/p&gt;
&lt;p&gt;在 HTTP 协议中，可以对内容（也就是 body 部分）进行编码，可以采用 gzip 这样的编码，从而达到压缩的目的。也可以使用其他的编码把内容搅乱或加密，以此来防止未授权的第三方看到文档的内容。所以 HTTP 压缩，其实就是 HTTP 内容编码的一种。&lt;/p&gt;
&lt;p&gt;HTTP 压缩是指: Web 服务器和浏览器之间压缩传输的&amp;quot;文本内容&amp;quot;的方法。HTTP 采用通用的压缩算法，比如 gzip 来压缩 HTML、JavaScript、CSS 文件。能大大减少网络传输的数据量，提高了用户显示网页的速度。&lt;/p&gt;
&lt;p&gt;首先，浏览器发送一个请求（request）给 Web 服务器，支持一个压缩格式如（gzip），服务端会将原来的源码压缩之后，通过 HTTP 响应（response）信息返回给 Web 浏览器，浏览器接收之后，显示出来。&lt;/p&gt;
&lt;p&gt;HTTP 压缩的过程:&lt;/p&gt;
&lt;p&gt;1.浏览器发送 HTTP Request 给 Web 服务器，Request 中有 Accept-Encoding:gzip、deflate。&lt;/p&gt;
&lt;p&gt;2.Web 服务器接到 Request 后，生成原始的 Response，其中有原始的 Content-Type 和 Content-Length。&lt;/p&gt;
&lt;p&gt;3.Web 服务器通过 gzip，来对 Response 进行编码，编码后 header 中有 Content-Type 和 Content-Length（压缩后的大小），并且增加了 Content-Encoding:gzip，然后把 Response 发送给浏览器。&lt;/p&gt;
&lt;p&gt;4.浏览器接到 Response 后，根据 Content-Encoding:gzip 来对 Response 进行解码。获取到原始 Response 后，然后显示出网页。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go cond 锁定期唤醒锁</title>
      <link>http://70data.net/archives/2017-05-31.html</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2017-05-31.html</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) var</description>
    </item>
    
    <item>
      <title>Go 中如何阻塞等待所有 goroutines 都完成</title>
      <link>http://70data.net/archives/2017-05-30.html</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2017-05-30.html</guid>
      <description>&lt;p&gt;方案一：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;
)

// 定义一个同步等待的组
var wg sync.WaitGroup

// 定义一个Printer函数用于并发
func Printer(a int) {
    time.Sleep(2000 * time.Millisecond)
    fmt.Printf(&amp;quot;i am %d\n&amp;quot;, a)
    defer wg.Done()
}

func main() {
    // 获取cpu个数
    maxProcs := runtime.NumCPU()
    // 限制同时运行的goroutines数量
    runtime.GOMAXPROCS(maxProcs)
    for i := 0; i &amp;lt; 10; i++ {
        //为同步等待组增加一个成员
        wg.Add(1)
        //并发一个goroutine
        go Printer(i)
    }
    // 阻塞等待所有组内成员都执行完毕退栈
    wg.Wait()
    fmt.Println(&amp;quot;WE DONE!!!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>CentOS 6.7 以 yum 形式升级内核并安装 Docker</title>
      <link>http://70data.net/archives/2017-02-23.html</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2017-02-23.html</guid>
      <description>&lt;p&gt;目前内核版本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lost docker]# uname -r
2.6.32-573.el6.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;导入 public key。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lost yum.repos.d]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>SaltStack 开发遇到的问题</title>
      <link>http://70data.net/archives/2016-12-12.html</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2016-12-12.html</guid>
      <description>&lt;p&gt;开发 SaltStack 的 Web 界面，遇到一个神奇的问题：&lt;/p&gt;
&lt;p&gt;通过 Python 调用 salt-api 没有返回值，直到超时，并且后端打印 DEBUG 日志：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2016/12/1678920883.png&#34; alt=&#34;saltstack开发遇到的问题1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;会提示机器链接不上，而且机器 hostname 是被拆分开的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排查 Logstash 2.4 升级到 5.0 版本后 Kafka 不兼容问题</title>
      <link>http://70data.net/archives/2016-11-16.html</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2016-11-16.html</guid>
      <description>&lt;p&gt;之前对 ELKB 环境从 2.4 版本升级到最新的 5.0 稳定版本，发现 Kafka 集群运行报错，现在把排查过程记录下。&lt;/p&gt;
&lt;p&gt;之前环境：&lt;/p&gt;
&lt;p&gt;logstash2.4&lt;/p&gt;
&lt;p&gt;logstash-input-kafka-2.0.9&lt;/p&gt;
&lt;p&gt;logstash-output-kafka-2.0.5&lt;/p&gt;
&lt;p&gt;kafka_2.10-0.8.2.2.tgz&lt;/p&gt;
&lt;p&gt;升级后环境：&lt;/p&gt;
&lt;p&gt;logstash5.0&lt;/p&gt;
&lt;p&gt;logstash-input-kafka-2.0.9&lt;/p&gt;
&lt;p&gt;logstash-output-kafka-2.0.5&lt;/p&gt;
&lt;p&gt;报错信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2016-11-16T14:35:44,739][ERROR][logstash.inputs.kafka] Unknown setting &#39;zk_connect&#39; for kafka
[2016-11-16T14:35:44,741][ERROR][logstash.inputs.kafka] Unknown setting &#39;topic_id&#39; for kafka
[2016-11-16T14:35:44,741][ERROR][logstash.inputs.kafka] Unknown setting &#39;reset_beginning&#39; for kafka
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Error Can&#39;t set headers after they are sent</title>
      <link>http://70data.net/archives/2016-07-02.html</link>
      <pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2016-07-02.html</guid>
      <description>&lt;p&gt;NodeJS 启动，出现如下报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Can&#39;t set headers after they are sent.
at ServerResponse.OutgoingMessage.setHeader (_http_outgoing.js:335:11)
at ServerResponse.header (/server/node/opstools/node_modules/express/lib/response.js:700:10)
at ServerResponse.send (/server/node/opstools/node_modules/express/lib/response.js:154:12)
at fn (/server/node/opstools/node_modules/express/lib/response.js:934:10)
at View.exports.renderFile [as engine] (/server/node/opstools/node_modules/ejs/lib/ejs.js:353:10)
at View.render (/server/node/opstools/node_modules/express/lib/view.js:93:8)
at EventEmitter.app.render (/server/node/opstools/node_modules/express/lib/application.js:566:10)
at ServerResponse.res.render (/server/node/opstools/node_modules/express/lib/response.js:938:7)
at /server/node/opstools/app.js:43:9
at Layer.handle_error (/server/node/opstools/node_modules/express/lib/router/layer.js:58:5)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Elastic Stack 的演进</title>
      <link>http://70data.net/archives/2016-01-02.html</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2016-01-02.html</guid>
      <description>&lt;p&gt;Elastic Stack 是由 Elastic 公司推出的一个技术栈，包括但不限于 beats、logstash、elasticsearch、kibana 等软件。&lt;/p&gt;
&lt;p&gt;目前整体的架构 大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data-net-static.smartgslb.com/upload/log/01.png&#34; alt=&#34;01.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git Rebase</title>
      <link>http://70data.net/archives/2015-11-12.html</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-12.html</guid>
      <description>&lt;p&gt;分支合并，有两个选择，一个是 &lt;code&gt;merge&lt;/code&gt;，另一个是 &lt;code&gt;rebase&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;merge&lt;/code&gt; 和 &lt;code&gt;rebase&lt;/code&gt; 合并后的结果是一模一样的，形象的说，二者是殊途同归。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;rebase&lt;/code&gt; 后的 &lt;code&gt;commit&lt;/code&gt; 与之前的 &lt;code&gt;commit&lt;/code&gt;，它们的 SHA-1 值不同，Git 会把它们看成两次提交。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Git 回滚合并</title>
      <link>http://70data.net/archives/2015-11-11.html</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-11.html</guid>
      <description>&lt;p&gt;假设有如下分支图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2018/02/94180264.png&#34; alt=&#34;unmerge1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;注：Git 分支图中的箭头表示依赖关系，并不是分支发展路线。发展路线和箭头是相反的。也就是图中是从 C1 开始一直发展到 C12 的。&lt;/p&gt;
&lt;p&gt;假设要回滚 C10。&lt;/p&gt;
&lt;p&gt;第一种解决方案是将 &lt;code&gt;master&lt;/code&gt; 回退到 C8，然后将两个特性分支 &lt;code&gt;jk/post-checkout&lt;/code&gt; 和 &lt;code&gt;db/push-cleanup&lt;/code&gt; 合并过来。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git reset --hard [sha_of_C8]
git merge jk/post-checkout
git merge db/push-cleanup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成之后，分支图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2018/02/680467250.png&#34; alt=&#34;unmerge2.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 删除远程服务器文件同时保留本地文件</title>
      <link>http://70data.net/archives/2015-11-10.html</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-10.html</guid>
      <description>&lt;p&gt;在上传工程到 git 上时，有时候会把本地的一些配置文件传到服务器上，这时你先删除本地，再同步服务器，显然是不合理的。&lt;/p&gt;
&lt;p&gt;git 提供了一个好的解决方法，可以直接删除服务器文件，同时不影响本地文件，命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rm --cached filename/-r directory
git commit &amp;quot;xxxx&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Git 分支管理模型</title>
      <link>http://70data.net/archives/2015-11-06.html</link>
      <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-06.html</guid>
      <description>&lt;p&gt;单主干&lt;/p&gt;
&lt;p&gt;单主干的分支实践（Trunk-based development TBD）在 SVN 中比较流行。Google 和 Facebook 都使用这种方式。&lt;/p&gt;
&lt;p&gt;trunk 是 SVN 中主干分支的名称，对应到 Git 中则是 master 分支。&lt;/p&gt;
&lt;p&gt;TBD 的特点是所有团队成员都在单个主干分支上进行开发。当需要发布时，先考虑使用标签tag，即 tag 某个 commit 来作为发布的版本。如果仅靠 tag 不能满足要求，则从主干分支创建发布分支。bug 修复在主干分支中进行，再 cherry-pick 到发布分支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2018/02/2569065664.png&#34; alt=&#34;git-branch-01.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 放弃本地修改 直接 pull 代码</title>
      <link>http://70data.net/archives/2015-11-04.html</link>
      <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-04.html</guid>
      <description>&lt;p&gt;先 reset 然后清空。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard HEAD    
git clean -f -d    
git pull
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>github push 错误 The requested URL returned error 403 Forbidden while accessing</title>
      <link>http://70data.net/archives/2015-11-03.html</link>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-11-03.html</guid>
      <description>&lt;pre&gt;&lt;code&gt;git push  
error: The requested URL returned error: 403 Forbidden while accessing
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>TCPCopy 常见问题</title>
      <link>http://70data.net/archives/2015-06-18.html</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-06-18.html</guid>
      <description>&lt;p&gt;TCPCopy 常见问题:
出现 timeout 或者是频繁丢包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysctl -w net.core.rmem_max=131071
sysctl -w net.core.wmem_max=131071
sysctl -p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虚拟机使用 ab 测试的结果
会有包堆积的情况 不会马上处理 在 ab 测试数据跑完后 依然在处理数据包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10000    100    缺包不明显
10000    500    出现 ack 处理异常 缺包不明显
10000    1000   出现 ack 处理异常 缺包不明显 有内存堆积不到 1MB 
10000    2000   出现 ack 处理异常 缺包明显 3000 左右 有内存堆积 11MB
20000    500    出现 ack 处理异常 缺包不明显 有内存堆积 11MB
20000    1000   出现 ack 处理异常 缺包明显 13000 左右 有内存堆积 21MB
20000    2000   出现 ack 处理异常 缺包明显 13000 左右 有内存堆积 28MB
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>使用 TCPCopy 做引流测试</title>
      <link>http://70data.net/archives/2015-06-17.html</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2015-06-17.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2015/07/913137337.png&#34; alt=&#34;tcpcopy结构.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;TCPCopy 默认从 IP 层抓包，从 IP 层发包，我们在测试服务器进行响应包的截获，并通过 intercept 程序返回响应包的必要信息给 TCPCopy。&lt;/p&gt;
&lt;p&gt;在线上要引流的机器和测试机分别安装 TCPCopy，版本 tcpcopy-0.9.6.tar.gz&lt;/p&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;configure
make
make install
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python dict 排序</title>
      <link>http://70data.net/archives/2014-07-25.html</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2014-07-25.html</guid>
      <description>&lt;p&gt;对 dict 排序的方法，主要是把 dict 中的元素分离出来放到一个 list 中，对 list 排序，从而间接实现对 dict 的排序。&lt;/p&gt;
&lt;p&gt;这个&amp;quot;元素&amp;quot;可以是 key、value 或者 item。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 提取文本中的中文</title>
      <link>http://70data.net/archives/2014-07-23.html</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2014-07-23.html</guid>
      <description>&lt;p&gt;主要是通过中文编码范围匹配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import re
import sys

reload(sys)
sys.setdefaultencoding(&amp;quot;utf8&amp;quot;)

def translate(str):
    # 处理前进行相关的处理 包括转换成 Unicode 等
    line = str.strip().decode(&#39;utf-8&#39;, &#39;ignore&#39;)
    # 中文的编码范围是 \u4e00 到 \u9fa5
    p2 = re.compile(ur&#39;[^\u4e00-\u9fa5]&#39;)
    zh = &amp;quot; &amp;quot;.join(p2.split(line)).strip()
    zh = &amp;quot;,&amp;quot;.join(zh.split())
    # 经过相关处理后得到中文的文本
    outStr = zh
    return outStr
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python list 去重</title>
      <link>http://70data.net/archives/2014-07-13.html</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2014-07-13.html</guid>
      <description>&lt;p&gt;基础方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ids = [1,2,3,3,4,2,3,4,5,6,1]
news_ids = []
for id in ids:
    if id not in news_ids:
        news_ids.append(id)
print news_ids
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Flask 时快时慢的问题</title>
      <link>http://70data.net/archives/2014-07-09.html</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2014-07-09.html</guid>
      <description>&lt;pre&gt;&lt;code&gt;app.run(host=&amp;quot;0.0.0.0&amp;quot;, port=8080)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当 app.run 设置成这样的时候，有时候页面加载会时快时慢。
原来默认 Flask 是单线程的，需要更改参数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>让你的 Python 代码更 Pythonic</title>
      <link>http://70data.net/archives/2014-07-02.html</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2014-07-02.html</guid>
      <description>&lt;p&gt;变量交换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a, b = b, a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;循环遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in xrange(6):
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;带有索引位置的集合遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;colors = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;yellow&#39;]
for i, color in enumerate(colors):
    print i, color
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字符串拼接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;names = [&#39;raymond&#39;, &#39;rachel&#39;, &#39;matthew&#39;, &#39;roger&#39;, &#39;betty&#39;, &#39;melissa&#39;, &#39;judith&#39;, &#39;charlie&#39;]
print &#39;, &#39;.join(names)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open(&#39;data.txt&#39;) as f:
    data = f.read()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列表推导式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[j for i in xrange(10)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历字典&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for k, v in d.iteritems():
    print k, v
for i, v in enumerate(l):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;构建字典&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;names = [&#39;raymond&#39;, &#39;rachel&#39;, &#39;matthew&#39;]
colors = [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]
d = dict(izip(names, colors))
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python 升级导致 yum 命令无法使用的解决办法</title>
      <link>http://70data.net/archives/2013-07-05.html</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2013-07-05.html</guid>
      <description>&lt;p&gt;报错信息如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@develop local]# yum -y install prce  
There was a problem importing one of the Python modules  
required to run yum. The error leading to this problem was:  

No module named yum  

Please install a package which provides this module, or  
verify that the module is installed correctly.  
It&#39;s possible that the above module doesn&#39;t match the  
current version of Python, which is:  
2.6.1 (r261:67515, Aug 7 2010, 11:36:17)  
[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)]  
If you cannot solve this problem yourself, please go to  
the yum faq at:  
http://wiki.linux.duke.edu/YumFaq
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>MySQL 无法连接 [MySql Host is blocked because of many connection errors]</title>
      <link>http://70data.net/archives/2012-07-02.html</link>
      <pubDate>Mon, 02 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2012-07-02.html</guid>
      <description>&lt;p&gt;MySQL 报错 Host is blocked because of many connection errors; unblock with &amp;lsquo;mysqladmin flush-hosts&amp;rsquo;&lt;/p&gt;
&lt;p&gt;原因：同一个 ip 在短时间内产生太多中断的数据库连接而导致的阻塞。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP 5.3.x 中 It is not safe to rely on the system&#39;s timezone settings 警告</title>
      <link>http://70data.net/archives/2012-07-01.html</link>
      <pubDate>Sun, 01 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2012-07-01.html</guid>
      <description>&lt;p&gt;警告提示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Warning: phpinfo() [function.phpinfo]: It is not safe to rely on the system&#39;s timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected &#39;UTC&#39; for &#39;8.0/no DST&#39; instead in D:\apache2.2\htdocs\index.php on line 2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>折腾的博客</title>
      <link>http://70data.net/archives/2012-01-01.html</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2012-01-01.html</guid>
      <description>&lt;p&gt;经过进一个月的折腾，博客终于稳定了下来。&lt;/p&gt;
&lt;p&gt;由于这学期学习比较紧张，所以基本没有什么时间继续做论坛。&lt;/p&gt;
&lt;p&gt;博客也准备重做了，前几天关掉了论坛，以后就以更新博客为主。&lt;/p&gt;
&lt;p&gt;博客由 wordpress 升级到了 typecho。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一次被入侵和删除木马程序的经历</title>
      <link>http://70data.net/archives/2011-12-28.html</link>
      <pubDate>Wed, 28 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2011-12-28.html</guid>
      <description>&lt;p&gt;木马名称 Linux.BackDoor.Gates.5&lt;/p&gt;
&lt;p&gt;中午服务器出现流量超高，平时只有几百 M 的流量，那时候发现流量上 G 了，而且提示阿里云有 DDOS 流量攻击行为。&lt;/p&gt;
&lt;p&gt;开始也没有什么头绪，就是 ps 查进程，netstat 查端口号，nload 查流量。一时也没发现什么异常。&lt;/p&gt;
&lt;p&gt;后来发现 root 的家目录下存在 conf.n 这个文件。&lt;/p&gt;
&lt;p&gt;然而我并未创建这个文件，也是感觉问题来了。&lt;/p&gt;
&lt;p&gt;/bin/ps,/bin/netsta 程序都是1.2M的大小，然后默认的只有几百 KB。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2016/01/1890913733.png&#34; alt=&#34;木马截图.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 升级 Glibc</title>
      <link>http://70data.net/archives/2010-10-27.html</link>
      <pubDate>Wed, 27 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-27.html</guid>
      <description>&lt;p&gt;下载安装包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget http://ftp.gnu.org/gnu/glibc/glibc-2.15.tar.gz
wget http://ftp.gnu.org/gnu/glibc/glibc-ports-2.15.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xvf  glibc-2.15.tar.gz
tar -xvf  glibc-ports-2.15.tar.gz
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Invalid command &#39;Order&#39; perhaps misspelled or defined by a module not included in the server configuration</title>
      <link>http://70data.net/archives/2010-10-13.html</link>
      <pubDate>Wed, 13 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-13.html</guid>
      <description>&lt;p&gt;报错是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Invalid command &#39;Order&#39;, perhaps misspelled or defined by a module not included in the server configuration
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Linux netcat 命令</title>
      <link>http://70data.net/archives/2010-10-09.html</link>
      <pubDate>Sat, 09 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-09.html</guid>
      <description>&lt;p&gt;netcat 或者叫 nc 是 Linux 下的一个用于调试和检查网络工具包。&lt;/p&gt;
&lt;p&gt;可用于创建 TCP/IP 连接，最大的用途就是用来处理 TCP/UDP 套接字。&lt;/p&gt;
&lt;p&gt;这里我们将通过一些实例来学习 netcat 命令。&lt;/p&gt;
&lt;p&gt;1.在服务器-客户端架构上使用 netcat&lt;/p&gt;
&lt;p&gt;netcat 工具可运行于服务器模式，侦听指定端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -l 2389
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后你可以使用客户端模式来连接到 2389 端口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc localhost 2389
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在如果你输入一些文本，它将被发送到服务器端：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc localhost 2389
HI, 70data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在服务器的终端窗口将会显示下面内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nc -l 2389
HI, 70data
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>/usr/bin/ld cannot find -lxxx 解决思路</title>
      <link>http://70data.net/archives/2010-10-05.html</link>
      <pubDate>Tue, 05 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-05.html</guid>
      <description>&lt;p&gt;问题描述&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/ld: cannot find -lxxx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 xxx 即表示函式库文件名称，其命名规则是：lib+库名(即xxx)+.so。&lt;/p&gt;
&lt;p&gt;可能原因：&lt;/p&gt;
&lt;p&gt;1.安装，但相对应的 lib 版本不兼容。&lt;/p&gt;
&lt;p&gt;我们需要的是 libjpeg.so.8.0，但安装的是 libjpeg.so.6.0。或者是需要 arm 平台上的 lib，但我们安装的是 X86 架构的，或反之本来是要编译 arm 平台上的却忘了指定交叉编译器，我们需要 32 位但我们安装的是 64 位的。&lt;/p&gt;
&lt;p&gt;2.安装了，版本也对了，但 lib(.so.version-num) 的 symbolic link 不正确，没有连结到正确的函式库文件(.so)。&lt;/p&gt;
&lt;p&gt;我们需要的是 libjpeg.so.8.0，也安装上了。但是实际使用时我们是查找的 libjpeg.so，就需要相应的一个名为 libjpeg.so 的 link 指向 libjpeg.so.8.0。&lt;/p&gt;
&lt;p&gt;3.目录中确实没有相对应的 lib。&lt;/p&gt;
&lt;p&gt;系统中没有安装相对应的 lib，安装了，但不在这个目录且不在环境变量中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阿里云主机新加磁盘并格式化</title>
      <link>http://70data.net/archives/2010-10-04.html</link>
      <pubDate>Mon, 04 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-04.html</guid>
      <description>&lt;p&gt;新加了一块磁盘&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@iZ2zeh0wl8jq1asl4b3rf2Z ~]# fdisk -l
Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk label type: dos
Disk identifier: 0x0008de3e

Device Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048    83884031    41940992   83  Linux

Disk /dev/vdb: 107.4 GB, 107374182400 bytes, 209715200 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Linux 查看网卡 UUID</title>
      <link>http://70data.net/archives/2010-10-03.html</link>
      <pubDate>Sun, 03 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-03.html</guid>
      <description>&lt;p&gt;通过 nmcli 命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master test]# nmcli con
名称    UUID                                  类型            设备
ens33   c96bc909-188e-ec64-3a96-6a90982b08ad  802-3-ethernet  ens33
virbr0  7f06cd4d-a01e-4ba9-a5f8-494179118ee6  bridge          virbr0
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>为什么寄存器比内存快</title>
      <link>http://70data.net/archives/2010-10-02.html</link>
      <pubDate>Sat, 02 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-02.html</guid>
      <description>&lt;p&gt;计算机的存储层次（memory hierarchy）之中，寄存器（register）最快，内存其次，最慢的是硬盘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://70data.net/usr/uploads/2015/09/3961202427.png&#34; alt=&#34;存储层次.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>交换分区设置</title>
      <link>http://70data.net/archives/2010-10-01.html</link>
      <pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2010-10-01.html</guid>
      <description>&lt;pre&gt;&lt;code&gt;[root@rhce ~]# cat /proc/sys/vm/swappiness
60
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该值默认为 60。&lt;/p&gt;
&lt;p&gt;swappiness=0 的时候，表示最大限度使用物理内存，然后才使用 swap 空间。&lt;/p&gt;
&lt;p&gt;swappiness=100 的时候，表示积极的使用 swap 分区，并且把内存上的数据及时的搬运到 swap 空间中。&lt;/p&gt;
&lt;p&gt;现在服务器的内存动不动就是上百 G，所以我们可以把这个参数值设置的低一些，让操作系统尽可能的使用物理内存，降低系统对 swap 的使用，从而提高系统的性能。&lt;/p&gt;
&lt;p&gt;修改 swappiness 参数有临时修改和永久修改两种方法：&lt;/p&gt;
&lt;p&gt;临时修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rhce ~]# sysctl vm.swappiness=10
vm.swappiness = 10
[root@rhce ~]# cat /proc/sys/vm/swappiness
10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们的修改已经生效，但是如果我们重启了系统，又会变成 60。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>php.ini 中常会触及到的限制</title>
      <link>http://70data.net/archives/2011-07-10.html</link>
      <pubDate>Thu, 02 Jul 2009 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2011-07-10.html</guid>
      <description>&lt;p&gt;max_execution_time&lt;/p&gt;
&lt;p&gt;PHP 最大执行时间，php.ini 中默认数值为 30，即在页面执行 30s 后，服务器会直接强制终止页面的执行。&lt;/p&gt;
&lt;p&gt;对于一般的页面，30s 足够了，但对于有些需要直接利用 PHP 执行进行大量数据分析的页面，就需要根据页面执行的效率，调整 max_execution_time 的值，当然尽可能改善你的算法，获得最佳页面执行效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写给她</title>
      <link>http://70data.net/archives/2009-01-10.html</link>
      <pubDate>Sat, 10 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2009-01-10.html</guid>
      <description>如果有来生 我愿做一</description>
    </item>
    
    <item>
      <title>千夜博客</title>
      <link>http://70data.net/archives/2009-01-01.html</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://70data.net/archives/2009-01-01.html</guid>
      <description>这是博客的第一篇文</description>
    </item>
    
  </channel>
</rss>